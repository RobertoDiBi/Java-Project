/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ipd12.movieticketing;

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author robertodibiase
 */
public class AddShowtimeGUI extends javax.swing.JFrame {

    /**
     * Creates new form AddShowtimeGUI
     */
    DefaultListModel<Movie> modelMoviesList = new DefaultListModel<>();
    DefaultListModel<Showtime> modelShowtimesList = new DefaultListModel<>();
    Database db;
    long currShowSelectedId;
    long currMovieSelectedId;

    public AddShowtimeGUI() {
        //connecting to Database
        try {
            db = new Database();
            initComponents();
            loadMovies();
            loadShowtimes();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error connecting to database: " + ex.getMessage(),
                    "Database error",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }

    public void loadMovies() {
        //Load all movies into the list
        try {
            ArrayList<Movie> list = db.getAllMovies();
            modelMoviesList.clear();
            boolean x = true;
            for (Movie m : list) {
                modelMoviesList.addElement(m);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error fetching data: " + e.getMessage(),
                    "Database error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    public void loadShowtimes() {
        //Loads all showtimes into the list
        try {
            ArrayList<Showtime> list = db.getAllShowTime();
            modelShowtimesList.clear();
            for (Showtime s : list) {
                modelShowtimesList.addElement(s);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error fetching data: " + e.getMessage(),
                    "Database error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstMovies = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstShowtimes = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        tfCinemaId = new javax.swing.JTextField();
        tfMovieId = new javax.swing.JTextField();
        tfDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfTime = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfMaxCapacity = new javax.swing.JTextField();
        btAddShow = new javax.swing.JButton();
        btUpdateShow = new javax.swing.JButton();
        btDeleteShow = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lblShowtimeId = new javax.swing.JLabel();
        btDone = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFocusable(false);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Copperplate", 0, 15)); // NOI18N
        jLabel1.setText("Movies");

        lstMovies.setModel(modelMoviesList);
        lstMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstMoviesMouseClicked(evt);
            }
        });
        lstMovies.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstMoviesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstMovies);

        jLabel3.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        jLabel3.setText("Cinema ID:");
        jLabel3.setFocusable(false);

        jLabel4.setFont(new java.awt.Font("Copperplate", 0, 15)); // NOI18N
        jLabel4.setText("Showtimes");

        lstShowtimes.setModel(modelShowtimesList);
        lstShowtimes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstShowtimesMouseClicked(evt);
            }
        });
        lstShowtimes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstShowtimesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstShowtimes);

        jLabel6.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        jLabel6.setText("Movie ID:");
        jLabel6.setFocusable(false);

        tfCinemaId.setEditable(false);
        tfCinemaId.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        tfCinemaId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfCinemaId.setText("1");
        tfCinemaId.setRequestFocusEnabled(false);

        tfMovieId.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        tfMovieId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        tfDate.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        tfDate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfDate.setText("YYYY-MM-DD");
        tfDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfDateFocusGained(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        jLabel5.setText("Date:");
        jLabel5.setFocusable(false);

        tfTime.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        tfTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfTime.setText("hh:mm (am/pm)");
        tfTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfTimeFocusGained(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        jLabel7.setText("Time:");
        jLabel7.setFocusable(false);

        jLabel8.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        jLabel8.setText("Max Capacity:");
        jLabel8.setFocusable(false);

        tfMaxCapacity.setEditable(false);
        tfMaxCapacity.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        tfMaxCapacity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfMaxCapacity.setText("90");
        tfMaxCapacity.setToolTipText("");
        tfMaxCapacity.setFocusTraversalKeysEnabled(false);
        tfMaxCapacity.setFocusable(false);

        btAddShow.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        btAddShow.setText("Add Show");
        btAddShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddShowActionPerformed(evt);
            }
        });

        btUpdateShow.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        btUpdateShow.setText("Update Show");
        btUpdateShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateShowActionPerformed(evt);
            }
        });

        btDeleteShow.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        btDeleteShow.setText("Delete Show");
        btDeleteShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteShowActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        jLabel9.setText("ShowTime ID:");
        jLabel9.setFocusable(false);

        lblShowtimeId.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        lblShowtimeId.setText("...");

        btDone.setFont(new java.awt.Font("Copperplate", 0, 13)); // NOI18N
        btDone.setText("Done/Exit");
        btDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDoneActionPerformed(evt);
            }
        });

        jLabel10.setText("- Double click a Movie from the list to get the Movie ID");

        jLabel11.setText("-Double click a Showtime from the list to Update/Delete it");

        btReset.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        btReset.setText("Reset");
        btReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(221, 221, 221)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel9))
                                    .addGap(25, 25, 25))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(18, 18, 18)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfMaxCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblShowtimeId)
                                    .addComponent(tfDate)
                                    .addComponent(tfCinemaId)
                                    .addComponent(tfMovieId)
                                    .addComponent(tfTime, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btAddShow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btUpdateShow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btDone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btDeleteShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(lblShowtimeId))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfCinemaId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfMovieId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfMaxCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btAddShow)
                            .addComponent(btUpdateShow)
                            .addComponent(btDeleteShow))
                        .addGap(18, 18, 18)
                        .addComponent(btReset)
                        .addGap(78, 78, 78)
                        .addComponent(btDone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tfDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfDateFocusGained
        if (tfDate.getText().equalsIgnoreCase("yyyy-mm-dd")) {
            tfDate.setText("");
        }
    }//GEN-LAST:event_tfDateFocusGained

    private void tfTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfTimeFocusGained
        if (tfTime.getText().equalsIgnoreCase("hh:mm (am/pm)")) {
            tfTime.setText("");
        }
    }//GEN-LAST:event_tfTimeFocusGained

    private void btAddShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddShowActionPerformed
        //Add showtime for the corresponding movie, handling possible exeptions
        try {
            String timeCheck = ("\\b(?:[01]?\\d|2[0-3]):[0-5]?\\d((?i) (am|pm))?\\b");
            long cinemaId = Long.parseLong(tfCinemaId.getText());
            long movieId = Long.parseLong(tfMovieId.getText());

            String startDate = tfDate.getText();
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date date = sdf1.parse(startDate);
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());

            String time = tfTime.getText();
            if (time.equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Missing time! Please insert time.",
                        "Input Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!time.matches(timeCheck)) {
                JOptionPane.showMessageDialog(this,
                        "Incorrect time format! Please insert hh:mm (am/pm)",
                        "Input Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            String stgmaxCapacity = tfMaxCapacity.getText();
            if (stgmaxCapacity.equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Missing max capacity!",
                        "Input Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            int maxCapacity = Integer.parseInt(stgmaxCapacity);
            
            
            try {
                //Check if the showtime alredy exist
                ArrayList<Showtime> list = db.getAllShowTime();
                Showtime showtime = new Showtime(cinemaId, movieId, sqlDate, time, maxCapacity);
                for(Showtime s :list){
                    if ((s.getMovieId()==showtime.getMovieId())&&(s.getDate().equals(showtime.getDate())&&(s.getTime().equalsIgnoreCase(showtime.getTime()))) ){
                        System.out.println("Im here");
                        JOptionPane.showMessageDialog(this,
                            showtime.toString()+"\nThis showtime already exits!\nPlease enter a differet time or date.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                db.addShowtime(showtime);
                lblShowtimeId.setText("...");
                tfMovieId.setText("");
                tfDate.setText("YYYY-MM-DD");
                tfTime.setText("hh:mm (am/pm)");
                loadShowtimes();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error executing SQL query (insert):\n" + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this,
                    "Incorrect date format or empty date field! Please enter yyyy-mm-dd.\n" + ex.getMessage(),
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,
                    "Incorrect cinema ID or movie ID!\nPlease make sure that you inset a number and the fields are not empty.",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btAddShowActionPerformed


    private void lstMoviesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstMoviesValueChanged
        
    }//GEN-LAST:event_lstMoviesValueChanged

    private void btDeleteShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteShowActionPerformed
        //deleats selected showtime
        try {
            Showtime showtime = lstShowtimes.getSelectedValue();
            if (showtime == null) {
                return;
            }
            Object[] options = {"Delete", "Cancel"};
            int decision = JOptionPane.showOptionDialog(this,
                    "Are you sure you want to delete:\n" + showtime,
                    "Confirm deletion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null, options, options[1]);

            if (decision == JOptionPane.YES_OPTION) {
                db.deleteShowtime(showtime.getId());
                lblShowtimeId.setText("...");
                tfMovieId.setText("");
                tfDate.setText("YYYY-MM-DD");
                tfTime.setText("hh:mm (am/pm)");
                loadShowtimes();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error executing SQL query (delete):\n" + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btDeleteShowActionPerformed


    private void lstShowtimesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstShowtimesValueChanged
        
    }//GEN-LAST:event_lstShowtimesValueChanged

    private void btUpdateShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateShowActionPerformed
        if (currShowSelectedId == 0) {
            return;
        }
        
        try {
            long id = Long.parseLong(lblShowtimeId.getText());
            long cinemaId = Long.parseLong(tfCinemaId.getText());
            long movieId = Long.parseLong(tfMovieId.getText());
            String startDate = tfDate.getText();
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date date = sdf1.parse(startDate);
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());
            String time = tfTime.getText();
            int maxCapacity = Integer.parseInt(tfMaxCapacity.getText());
            Showtime showtime = new Showtime(id, cinemaId, movieId, sqlDate, time, maxCapacity);
            db.updateShowtime(showtime);
            loadShowtimes();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error executing SQL query (update):\n" + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Incorrect date format or empty date field! Please enter yyyy-mm-dd.\n" + ex.getMessage(),
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btUpdateShowActionPerformed

    private void btDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDoneActionPerformed
        this.dispose();
    }//GEN-LAST:event_btDoneActionPerformed

    private void lstMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstMoviesMouseClicked
        if(evt.getClickCount()==2){
            Movie movie = lstMovies.getSelectedValue();
        if (movie == null) {
            currMovieSelectedId = 0;
            return;
        }
        currMovieSelectedId = movie.getId();
        tfMovieId.setText(movie.getId() + "");
        }
    }//GEN-LAST:event_lstMoviesMouseClicked

    private void lstShowtimesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstShowtimesMouseClicked
        if(evt.getClickCount() == 2){
            Showtime showtime = lstShowtimes.getSelectedValue();
        if (showtime == null) {
            currShowSelectedId = 0;
            return;
        }
        currShowSelectedId = showtime.getId();
        lblShowtimeId.setText(showtime.getId() + "");
        tfMovieId.setText(showtime.getMovieId() + "");
        tfDate.setText(showtime.getDate() + "");
        tfTime.setText(showtime.getTime() + "");
        tfMaxCapacity.setText(showtime.getMaxCapacity() + "");
        }
    }//GEN-LAST:event_lstShowtimesMouseClicked

    private void btResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btResetActionPerformed
        lstMovies.clearSelection();
        lstShowtimes.clearSelection();
        currShowSelectedId = 0;
        lblShowtimeId.setText("");
        tfMovieId.setText("");
        tfDate.setText("YYYY-MM-DD");
        tfTime.setText("hh:mm (am/pm)");
    }//GEN-LAST:event_btResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddShowtimeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddShowtimeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddShowtimeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddShowtimeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddShowtimeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddShow;
    private javax.swing.JButton btDeleteShow;
    private javax.swing.JButton btDone;
    private javax.swing.JButton btReset;
    private javax.swing.JButton btUpdateShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblShowtimeId;
    private javax.swing.JList<Movie> lstMovies;
    private javax.swing.JList<Showtime> lstShowtimes;
    private javax.swing.JTextField tfCinemaId;
    private javax.swing.JTextField tfDate;
    private javax.swing.JTextField tfMaxCapacity;
    private javax.swing.JTextField tfMovieId;
    private javax.swing.JTextField tfTime;
    // End of variables declaration//GEN-END:variables
}
